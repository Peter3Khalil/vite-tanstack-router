/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LocaleLayoutRouteImport } from './routes/$locale/_layout'
import { Route as LocaleLayoutIndexRouteImport } from './routes/$locale/_layout/index'
import { Route as LocaleLayoutSignupRouteImport } from './routes/$locale/_layout/signup'
import { Route as LocaleLayoutLoginRouteImport } from './routes/$locale/_layout/login'

const LocaleRouteImport = createFileRoute('/$locale')()

const LocaleRoute = LocaleRouteImport.update({
  id: '/$locale',
  path: '/$locale',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LocaleLayoutRoute = LocaleLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => LocaleRoute,
} as any)
const LocaleLayoutIndexRoute = LocaleLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LocaleLayoutRoute,
} as any)
const LocaleLayoutSignupRoute = LocaleLayoutSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => LocaleLayoutRoute,
} as any)
const LocaleLayoutLoginRoute = LocaleLayoutLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => LocaleLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$locale': typeof LocaleLayoutRouteWithChildren
  '/$locale/login': typeof LocaleLayoutLoginRoute
  '/$locale/signup': typeof LocaleLayoutSignupRoute
  '/$locale/': typeof LocaleLayoutIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$locale': typeof LocaleLayoutIndexRoute
  '/$locale/login': typeof LocaleLayoutLoginRoute
  '/$locale/signup': typeof LocaleLayoutSignupRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$locale': typeof LocaleRouteWithChildren
  '/$locale/_layout': typeof LocaleLayoutRouteWithChildren
  '/$locale/_layout/login': typeof LocaleLayoutLoginRoute
  '/$locale/_layout/signup': typeof LocaleLayoutSignupRoute
  '/$locale/_layout/': typeof LocaleLayoutIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$locale'
    | '/$locale/login'
    | '/$locale/signup'
    | '/$locale/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$locale' | '/$locale/login' | '/$locale/signup'
  id:
    | '__root__'
    | '/'
    | '/$locale'
    | '/$locale/_layout'
    | '/$locale/_layout/login'
    | '/$locale/_layout/signup'
    | '/$locale/_layout/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LocaleRoute: typeof LocaleRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$locale': {
      id: '/$locale'
      path: '/$locale'
      fullPath: '/$locale'
      preLoaderRoute: typeof LocaleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$locale/_layout': {
      id: '/$locale/_layout'
      path: '/$locale'
      fullPath: '/$locale'
      preLoaderRoute: typeof LocaleLayoutRouteImport
      parentRoute: typeof LocaleRoute
    }
    '/$locale/_layout/': {
      id: '/$locale/_layout/'
      path: '/'
      fullPath: '/$locale/'
      preLoaderRoute: typeof LocaleLayoutIndexRouteImport
      parentRoute: typeof LocaleLayoutRoute
    }
    '/$locale/_layout/signup': {
      id: '/$locale/_layout/signup'
      path: '/signup'
      fullPath: '/$locale/signup'
      preLoaderRoute: typeof LocaleLayoutSignupRouteImport
      parentRoute: typeof LocaleLayoutRoute
    }
    '/$locale/_layout/login': {
      id: '/$locale/_layout/login'
      path: '/login'
      fullPath: '/$locale/login'
      preLoaderRoute: typeof LocaleLayoutLoginRouteImport
      parentRoute: typeof LocaleLayoutRoute
    }
  }
}

interface LocaleLayoutRouteChildren {
  LocaleLayoutLoginRoute: typeof LocaleLayoutLoginRoute
  LocaleLayoutSignupRoute: typeof LocaleLayoutSignupRoute
  LocaleLayoutIndexRoute: typeof LocaleLayoutIndexRoute
}

const LocaleLayoutRouteChildren: LocaleLayoutRouteChildren = {
  LocaleLayoutLoginRoute: LocaleLayoutLoginRoute,
  LocaleLayoutSignupRoute: LocaleLayoutSignupRoute,
  LocaleLayoutIndexRoute: LocaleLayoutIndexRoute,
}

const LocaleLayoutRouteWithChildren = LocaleLayoutRoute._addFileChildren(
  LocaleLayoutRouteChildren,
)

interface LocaleRouteChildren {
  LocaleLayoutRoute: typeof LocaleLayoutRouteWithChildren
}

const LocaleRouteChildren: LocaleRouteChildren = {
  LocaleLayoutRoute: LocaleLayoutRouteWithChildren,
}

const LocaleRouteWithChildren =
  LocaleRoute._addFileChildren(LocaleRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LocaleRoute: LocaleRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
