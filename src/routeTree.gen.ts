/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router';

import { Route as rootRouteImport } from './routes/__root';
import { Route as IndexRouteImport } from './routes/index';
import { Route as LocaleLayoutRouteImport } from './routes/$locale/_layout';
import { Route as LocaleLayoutIndexRouteImport } from './routes/$locale/_layout.index';
import { Route as LocaleLayoutAboutRouteImport } from './routes/$locale/_layout.about';

const LocaleRouteImport = createFileRoute('/$locale')();

const LocaleRoute = LocaleRouteImport.update({
  id: '/$locale',
  path: '/$locale',
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);
const LocaleLayoutRoute = LocaleLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => LocaleRoute,
} as any);
const LocaleLayoutIndexRoute = LocaleLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LocaleLayoutRoute,
} as any);
const LocaleLayoutAboutRoute = LocaleLayoutAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => LocaleLayoutRoute,
} as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/$locale': typeof LocaleLayoutRouteWithChildren;
  '/$locale/about': typeof LocaleLayoutAboutRoute;
  '/$locale/': typeof LocaleLayoutIndexRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/$locale': typeof LocaleLayoutIndexRoute;
  '/$locale/about': typeof LocaleLayoutAboutRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/$locale': typeof LocaleRouteWithChildren;
  '/$locale/_layout': typeof LocaleLayoutRouteWithChildren;
  '/$locale/_layout/about': typeof LocaleLayoutAboutRoute;
  '/$locale/_layout/': typeof LocaleLayoutIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/$locale' | '/$locale/about' | '/$locale/';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/$locale' | '/$locale/about';
  id:
    | '__root__'
    | '/'
    | '/$locale'
    | '/$locale/_layout'
    | '/$locale/_layout/about'
    | '/$locale/_layout/';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  LocaleRoute: typeof LocaleRouteWithChildren;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$locale': {
      id: '/$locale';
      path: '/$locale';
      fullPath: '/$locale';
      preLoaderRoute: typeof LocaleRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/$locale/_layout': {
      id: '/$locale/_layout';
      path: '/$locale';
      fullPath: '/$locale';
      preLoaderRoute: typeof LocaleLayoutRouteImport;
      parentRoute: typeof LocaleRoute;
    };
    '/$locale/_layout/': {
      id: '/$locale/_layout/';
      path: '/';
      fullPath: '/$locale/';
      preLoaderRoute: typeof LocaleLayoutIndexRouteImport;
      parentRoute: typeof LocaleLayoutRoute;
    };
    '/$locale/_layout/about': {
      id: '/$locale/_layout/about';
      path: '/about';
      fullPath: '/$locale/about';
      preLoaderRoute: typeof LocaleLayoutAboutRouteImport;
      parentRoute: typeof LocaleLayoutRoute;
    };
  }
}

interface LocaleLayoutRouteChildren {
  LocaleLayoutAboutRoute: typeof LocaleLayoutAboutRoute;
  LocaleLayoutIndexRoute: typeof LocaleLayoutIndexRoute;
}

const LocaleLayoutRouteChildren: LocaleLayoutRouteChildren = {
  LocaleLayoutAboutRoute: LocaleLayoutAboutRoute,
  LocaleLayoutIndexRoute: LocaleLayoutIndexRoute,
};

const LocaleLayoutRouteWithChildren = LocaleLayoutRoute._addFileChildren(
  LocaleLayoutRouteChildren
);

interface LocaleRouteChildren {
  LocaleLayoutRoute: typeof LocaleLayoutRouteWithChildren;
}

const LocaleRouteChildren: LocaleRouteChildren = {
  LocaleLayoutRoute: LocaleLayoutRouteWithChildren,
};

const LocaleRouteWithChildren =
  LocaleRoute._addFileChildren(LocaleRouteChildren);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LocaleRoute: LocaleRouteWithChildren,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
